{"version":3,"file":"baslider.js","mappings":";;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA,+DAA+D;AAC/D,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,uDAAuD,sBAAsB,UAAU;AACvF;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA,6BAA6B,wBAAwB;AACrD;AACA;AACA,oDAAoD,WAAW;AAC/D,mDAAmD,WAAW;AAC9D;AACA;AACA,2CAA2C,WAAW;AACtD,2DAA2D,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qDAAqD;AACrD,mCAAmC;AACnC,0FAA0F;AAC1F,mFAAmF;AACnF;AACA;AACA,wCAAwC;AACxC;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,6DAA6D;AAC7D,uCAAuC;AACvC,qEAAqE;AACrE,iEAAiE;AACjE,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL,CAAC","sources":["webpack://acba-slider/./src/plugin/baslider.ts"],"sourcesContent":["\"use strict\";\n(() => {\n    'use strict';\n    (function () {\n        var initializeSlider = function (container, settings) {\n            if (settings === void 0) {\n                settings = {};\n            }\n            if (container.dataset.initSlider) {\n                return;\n            }\n            container.dataset.initSlider = '1';\n            var beforeImage = container.querySelector('img[data-image=\"1\"]');\n            var afterImage = container.querySelector('img[data-image=\"2\"]');\n            if (!beforeImage || !afterImage) {\n                console.error('Before or After image is missing in the container.');\n                return;\n            }\n            var labels = container.querySelector('.acbaslider__labels');\n            var beforeLabel = null;\n            var afterLabel = null;\n            var floatingLabelsEnabled = container.dataset.floatingLabels === 'true';\n            if (floatingLabelsEnabled) {\n                beforeLabel = document.createElement('span');\n                beforeLabel.className = 'acbaslider__floating-label -before';\n                beforeLabel.innerText = 'Before';\n                beforeLabel.style.backgroundColor =\n                    container.dataset.beforelabelcolor || '#FFFFFF';\n                container.appendChild(beforeLabel);\n                afterLabel = document.createElement('span');\n                afterLabel.className = 'acbaslider__floating-label -after';\n                afterLabel.innerText = 'After';\n                afterLabel.style.backgroundColor =\n                    container.dataset.afterlabelcolor || '#FFFFFF';\n                container.appendChild(afterLabel);\n            }\n            var config = Object.assign({\n                step: parseInt(container.dataset.step || '1') || 1,\n                startPosition: parseInt(container.dataset.startingposition || '50') || 50,\n                mouseFollow: container.dataset.mousefollow === 'true',\n                clickPosition: container.dataset.clickposition === 'true',\n                autoSlide: container.dataset.autoslide === 'true',\n                autoSliderSteps: parseInt(container.dataset.autoslidersteps || '5') || 5,\n                slideSpeed: parseInt(container.dataset.slidespeed || '3000') || 3000,\n                dividerColor: container.dataset.dividercolor || '#C5C5C5',\n                handleColor: container.dataset.handlecolor || '#ACACAC',\n                animationSpeed: parseInt(container.dataset.animationspeed || '70') || 70,\n                handleVisible: container.dataset.handlevisible === 'true',\n            }, settings);\n            if (labels) {\n                labels.style.display = 'none';\n            }\n            if (!beforeImage || !afterImage)\n                return;\n            var setResponsiveSize = function () {\n                if (!beforeImage || !beforeImage.naturalWidth ||\n                    !beforeImage || !beforeImage.naturalHeight) {\n                    console.log('Images are not fully loaded yet.');\n                    return;\n                }\n                var aspectRatio = beforeImage.naturalHeight / beforeImage.naturalWidth;\n                var containerWidth = container.clientWidth || beforeImage.naturalWidth;\n                var height = containerWidth * aspectRatio;\n                container.style.height = ''.concat(height.toString(), 'px');\n            };\n            var initializeResponsiveSize = function () {\n                setResponsiveSize();\n                window.addEventListener('resize', setResponsiveSize);\n            };\n            initializeResponsiveSize();\n            // Set initial styles for the container if u want to have it dynamic :) (remove the box-radius and box-shadow from the scss!)\n            // container.style.borderRadius = '15px';\n            // container.style.boxShadow = '0px 8px 20px rgba(0, 0, 0, 0.2)';\n            afterImage.style.clipPath = 'inset(0 '.concat((100 - config.startPosition).toString(), '% 0 0)');\n            var slider = document.createElement('div');\n            slider.className = 'acbaslider__divider';\n            slider.style.backgroundColor = config.dividerColor; // Set divider color\n            var handle = document.createElement('div');\n            handle.className = 'acbaslider__divider__handle';\n            handle.style.backgroundColor = config.handleColor; // Set handle color\n            handle.style.display = config.handleVisible ? 'block' : 'none'; // Set handle visibility\n            slider.appendChild(handle);\n            container.appendChild(slider);\n            slider.style.left = ''.concat(config.startPosition.toString(), '%');\n            var isDragging = false;\n            var autoSlideInterval;\n            // // Existing function to update slider position\n            var updateSliderPosition = (function () {\n                var lastFrame = 0;\n                return function (percentage, smooth, isClick) {\n                    if (smooth === void 0) {\n                        smooth = false;\n                    }\n                    if (isClick === void 0) {\n                        isClick = false;\n                    }\n                    var now = performance.now();\n                    if (now - lastFrame < 16)\n                        return; // Maintain 60 FPS\n                    lastFrame = now;\n                    // Default transition duration based on animationSpeed from the config\n                    var defaultTransitionDuration = `${config.animationSpeed}ms ease`; // Set based on config\n                    // Use a fixed transition duration for click\n                    var clickTransitionDuration = '0.3s ease'; // Keep fixed duration for click transition\n                    // Determine the transition duration based on the smooth flag\n                    var sliderTransition = smooth\n                        ? defaultTransitionDuration\n                        : 'none';\n                    // Add a bit of extra time to the label transition duration\n                    var labelTransitionDuration = config.animationSpeed + 30; // Add 100ms to animationSpeed\n                    var labelTransition = smooth\n                        ? `${labelTransitionDuration}ms ease`\n                        : 'none';\n                    var afterImageClipValue = 100 - percentage;\n                    var beforeLabelOffset = `calc(${percentage}% - 15%)`;\n                    var afterLabelOffset = `calc(${percentage}% + 5%)`;\n                    slider.style.transition = sliderTransition;\n                    afterImage.style.transition = sliderTransition;\n                    slider.style.left = `${percentage}%`;\n                    afterImage.style.clipPath = `inset(0 ${afterImageClipValue}% 0 0)`;\n                    if (floatingLabelsEnabled) {\n                        if (beforeLabel) {\n                            beforeLabel.style.transition = labelTransition;\n                            beforeLabel.style.left = beforeLabelOffset;\n                        }\n                        if (afterLabel) {\n                            afterLabel.style.transition = labelTransition;\n                            afterLabel.style.left = afterLabelOffset;\n                        }\n                    }\n                };\n            })();\n            // Ensure floating labels update on slider load\n            updateSliderPosition(config.startPosition, false, false);\n            var onMouseMove = function (e) {\n                if (isDragging || config.mouseFollow) {\n                    var rect = container.getBoundingClientRect();\n                    var offsetX = e.clientX - rect.left;\n                    offsetX = Math.max(0, Math.min(offsetX, rect.width));\n                    var percentage = (offsetX / rect.width) * 100;\n                    updateSliderPosition(percentage, true, false);\n                }\n            };\n            var stopDragging = function () {\n                isDragging = false;\n                slider.style.transition = 'none';\n                afterImage.style.transition = 'none';\n            };\n            slider.addEventListener('mousedown', function () {\n                isDragging = true;\n                slider.style.transition = 'none';\n                afterImage.style.transition = 'none';\n            });\n            container.addEventListener('mousemove', onMouseMove);\n            document.addEventListener('mouseup', stopDragging);\n            if (config.clickPosition) {\n                container.addEventListener('click', function (e) {\n                    var rect = container.getBoundingClientRect();\n                    var offsetX = e.clientX - rect.left;\n                    var percentage = (offsetX / rect.width) * 100;\n                    updateSliderPosition(percentage, true, true);\n                });\n            }\n            // Automatic sliding feature\n            var startAutoSlide = function () {\n                var position = config.startPosition; // Starting position from config\n                var direction = 1; // Initial direction for sliding\n                var autoSliderSteps = parseFloat(config.autoSliderSteps.toString()) || 5; // Allow decimal\n                var slideSpeed = parseFloat(config.slideSpeed.toString()) || 3000; // Allow decimal\n                var updateDirection = function () {\n                    if (position >= 100) {\n                        direction = -1; // Reverse direction if reaching max position\n                    }\n                    else if (position <= 0) {\n                        direction = 1; // Reverse direction if reaching min position\n                    }\n                };\n                autoSlideInterval = setInterval(function () {\n                    position += autoSliderSteps * direction; // Move position by autoSliderSteps\n                    updateDirection(); // Check if direction needs to be updated\n                    position = Math.max(0, Math.min(position, 100)); // Clamp position between 0 and 100\n                    updateSliderPosition(position, true, false); // Update the slider position on the UI\n                }, slideSpeed); // Use slideSpeed for interval timing\n            };\n            // Pause and resume functions\n            var pauseAutoSlide = function () {\n                clearInterval(autoSlideInterval); // Clear the interval to pause\n            };\n            var resumeAutoSlide = function () {\n                if (config.autoSlide) {\n                    startAutoSlide(); // Restart auto sliding if it's enabled\n                }\n            };\n            // Initialize auto-slide if enabled\n            if (config.autoSlide) {\n                startAutoSlide(); // Start the auto sliding feature\n                // Event listeners to pause and resume on user interaction\n                container.addEventListener('mouseenter', pauseAutoSlide);\n                container.addEventListener('mouseleave', resumeAutoSlide);\n                container.addEventListener('mousedown', pauseAutoSlide);\n                container.addEventListener('mouseup', resumeAutoSlide);\n                container.addEventListener('touchstart', pauseAutoSlide);\n                container.addEventListener('touchend', resumeAutoSlide);\n            }\n            slider.addEventListener('touchstart', function () {\n                isDragging = true;\n                slider.style.transition = 'none';\n                afterImage.style.transition = 'none';\n            });\n            document.addEventListener('touchmove', function (e) {\n                var touch = e.touches[0];\n                onMouseMove(touch);\n            });\n            document.addEventListener('touchend', stopDragging);\n            slider.tabIndex = 0;\n            slider.addEventListener('keydown', function (e) {\n                var percentage = parseFloat(slider.style.left) || config.startPosition;\n                var stepSize = config.step;\n                if (e.key === 'ArrowLeft' && percentage > 0) {\n                    percentage = Math.max(0, percentage - stepSize);\n                }\n                if (e.key === 'ArrowRight' && percentage < 100) {\n                    percentage = Math.min(100, percentage + stepSize);\n                }\n                updateSliderPosition(percentage, true, false);\n            });\n            if (beforeImage.complete && afterImage.complete) {\n                setResponsiveSize();\n            }\n            else {\n                beforeImage.onload = afterImage.onload = setResponsiveSize;\n            }\n            var resizeObserver = new ResizeObserver(setResponsiveSize);\n            resizeObserver.observe(container);\n        };\n        document.addEventListener('DOMContentLoaded', function () {\n            var initMySlide = function (el) {\n                var containers = document.querySelectorAll(el);\n                containers.forEach(function (container) {\n                    var beforeImage = container.querySelector('img[data-image=\"1\"]');\n                    var afterImage = container.querySelector('img[data-image=\"2\"]');\n                    if (!beforeImage || !afterImage) {\n                        console.error('Before or After image is missing in the container.');\n                        return;\n                    }\n                    var config = {};\n                    [\n                        'step',\n                        'startingPosition',\n                        'mouseFollow',\n                        'clickPosition',\n                        'autoSlide',\n                        'slideSpeed',\n                    ].forEach(function (prop) {\n                        if (container.dataset[prop]) {\n                            config[prop] = container.dataset[prop];\n                        }\n                    });\n                    if (beforeImage.complete && afterImage.complete) {\n                        initializeSlider(container, config);\n                    }\n                    else {\n                        beforeImage.onload = afterImage.onload = function () {\n                            return initializeSlider(container, config);\n                        };\n                    }\n                });\n            };\n            initMySlide('[data-component=\"beforeafterslider\"]');\n        });\n    })();\n})();\n"],"names":[],"sourceRoot":""}